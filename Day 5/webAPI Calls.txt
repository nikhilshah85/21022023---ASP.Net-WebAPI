


		1. Craete a webapi - in memory collection and with EF Core and SQl Server
		2. Consume WebAPI - 
				Client End - useing Javascript(JQuery, Ajax, Axios etc..) - allows Get, Put, Post, Delete
					This is Fastest 
					Not secure - not to be used for critical data
				Server End - C# - HttpClient - allows Get, Put, Post, Delete


					Both of above are a part of standards

				fetch API - part of REST standards for client end calls
				HttpClient - part of REST standards for server end calls

	-----------------------------------------------------------------------------------------------------
			fetch(url).then( responseDataFormat => responseDataFormat.json())  -- this method needs the dataformat
				  .then( resultData => { code to display resultData in HTML } ) -- this is the data - table, div etc..
				  .catch( errorDetails => { code to display error }) 


	-------------------------------------------------------------------------------------------------------
		Drawbacks of client end (fetch, Jquery, ajax etc...)
			1. the script along with logic gets display to the user in inspect
			2. Is application only for web apps - not for desktop app - background OS services - console app - librar app
	-----------------------------------------------------------------------------------------------------------
			Server end 
				1. HttpClient - allows get, put post, delete
				2. does not disclose the code to client
				3. This is a standard object by w3c - available in all the frameowork, Angular, react, java etc..


















